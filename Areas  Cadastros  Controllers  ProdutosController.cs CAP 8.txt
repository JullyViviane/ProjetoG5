usando o  Modelo . Cadastros ;
usando o  Modelo . Cadastros ;
using  System ;
usando o  sistema . Coleções . Genérico ;
usando o  sistema . Linq ;
@@ -9,6 +8,7 @@
usando o  sistema . Rede ;
usando o  Servi ç o . Cadastros ;
usando o  Servi ç o . Tabelas ;
usando o  sistema . IO ;

namespace  Projeto_G2 . Áreas . Cadastros . Controladores
{
@@ -48,12 +48,31 @@ private void PopularViewBag (Produto produto = nulo)
            }
        }

        privado  ActionResult  GravarProduto ( Produto  produto )
         byte privado [] SetLogotipo ( HttpPostedFileBase  logotipo )
        {
            var  bytesLogotipo  =  novo  byte [ logotipo . ContentLength ];
            logotipo . InputStream . Ler ( bytesLogotipo , 0 , logotipo . ContentLength );
            return  bytesLogotipo ;
        }
        // Método privado
        private  ActionResult  GravarProduto ( Produto  produto , HttpPostedFileBase  logotipo  =  null , string  chkRemoverImagem  =  null )
        {
            Experimente
            {
                if ( ModelState . IsValid )
                {
                    if ( chkRemoverImagem  ! =  null )
                    {
                        produto . Logotipo  =  nulo ;
                    }
                    // Cópia do conteúdo do arquivo no objeto de produto
                    if ( logotipo  ! =  null )
                    {
                        produto . LogotipoMimeType  =  logotipo . ContentType ;
                        produto . Logotipo  =  SetLogotipo ( logotipo );
                        produto . NomeArquivo  =  logotipo . FileName ;
                        produto . TamanhoArquivo  =  logotipo . ContentLength ;
                    }
                    produtoServico . GravarProduto ( produto );
                    return  RedirectToAction ( " Index " );
                }
@@ -62,6 +81,7 @@ private ActionResult GravarProduto (Produto produto)
            }
            pegar
            {
                PopularViewBag ( produto );
                voltar  Ver ( produto );
            }
        }
@@ -93,24 +113,34 @@ public ActionResult Create ()

        // POST: Produtos / Create
        [ HttpPost ]
         Criar ActionResult  público ( Produto produto ) 
        public  ActionResult  Create ( Produto  produto , HttpPostedFileBase  logotipo  =  null , string  chkRemoverImagem  =  null )
        {
            devolver  GravarProduto ( produto , logotipo , chkRemoverImagem );
        }

        public  FileContentResult  GetLogotipo ( long  id )
        {
            devolver  GravarProduto ( produto );
            Produto  produto  =  produtoServico . ObterProdutoPorId ( id );
            if ( produto  ! =  nulo )
            {
                voltar  Ficheiro ( produto . Logotipo , produto . LogotipoMimeType );
            }
            return  null ;
        }

        // GET: Produtos / Edit / 5
        public  ActionResult  Edit ( long ? id )
        {
            PopularViewBag ( produtoServico . ObterProdutoPorId (( long ) id ));

            retornar  ObterVisaoProdutoPorId ( id );
        }

        // POST: Produtos / Edit / 5
        [ HttpPost ]
        [ ValidateAntiForgeryToken ]
         Editar ActionResult  público ( Produto produto ) 
        public  ActionResult  Edit ( Produto  produto , HttpPostedFileBase  logotipo  =  null , string  chkRemoverImagem  =  null )
        {
            devolver  GravarProduto ( produto );
            devolver  GravarProduto ( produto , logotipo , chkRemoverImagem );
        }

        // OBTER: Produtos / Excluir / 5
@@ -134,5 +164,14 @@ public ActionResult Delete (int id, FormCollection collection)
                return  View ();
            }
        }

        public  ActionResult  DownloadArquivo ( long  id )
        {
            Produto  produto  =  produtoServico . ObterProdutoPorId ( id );
            FileStream  fileStream  =  new  FileStream ( Server . MapPath ( " ~ / App_Data / "  +  produto . NomeArquivo ), FileMode . Create , FileAccess . Write );
            fileStream . Write ( produto . Logotipo , 0 , Converter . ToInt32 ( produto . TamanhoArquivo ));
            fileStream . Fechar ();
             arquivo de retorno ( fileStream . Nome , produto . LogotipoMimeType , produto . NomeArquivo );
        }
    }
}